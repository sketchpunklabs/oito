// Pivot Rotation
// transform.position += (transform.rotation*Pivot);
// if (RotateX)
//     transform.rotation *= Quaternion.AngleAxis(45*Time.deltaTime, Vector3.right);
// if (RotateY)
//     transform.rotation *= Quaternion.AngleAxis(45*Time.deltaTime, Vector3.up);
// if (RotateZ)
//     transform.rotation *= Quaternion.AngleAxis(45*Time.deltaTime, Vector3.forward);
// transform.position -= (transform.rotation*Pivot);


a•b is the dot product
(a•b)/√(b•b) is scalar projection
b(a•b)/(b•b) is vector projection
(a•b)/(b•b) is uh, very useful, but what is it called?


// A long tail ease out function. Input range, 0-1. 
float QuarticEaseOut(const float& Input){ return (FMath::Pow(Input-1.0f, 4.0f) * -1.0f) + 1.0f; };
desmos y\ =\ \left(x-1\right)^{4}\ \cdot\ -1\ +\ 1
in range between 0-2 is makes a nice squarish curve

// A C2 continuous ease out function. Input range, 0-1
float CircularEaseOut(const float& Input){ return FMath::Sqrt(1.0f - FMath::Pow(Input - 1.0f, 2.0f)); };
demos y\ =\ \sqrt{1-\left(x-1\right)^{2}}  If going between 0 and 2, get a nice half circle

// An ease out function. Input range, 0-1.
float SquaredEaseOut(const float& Input){ return (FMath::Pow(Input-1.0f, 2.0f) * -1.0f) + 1.0f; };

y\ =\ \left(\left(x-1\right)^{2}\ \ \cdot\ \left(-1\right)\right)+\ 1
Not really square


var funhash = function(s) {
    for(var i = 0, h = 0xdeadbeef; i < s.length; i++)
        h = Math.imul(h ^ s.charCodeAt(i), 2654435761);
    return (h ^ h >>> 16) >>> 0;
};


https://github.com/Unity-Technologies/UnityCsReference/blob/master/Runtime/Export/Math/Mathf.cs
public static float LerpAngle(float a, float b, float t)
{
    float delta = Repeat((b - a), 360);
    if (delta > 180)
        delta -= 360;
    return a + delta * Clamp01(t);
}

// Calculates the shortest difference between two given angles.
public static float DeltaAngle(float current, float target)
{
    float delta = Mathf.Repeat((target - current), 360.0F);
    if (delta > 180.0F)
        delta -= 360.0F;
    return delta;
}

// Loops the value t, so that it is never larger than length and never smaller than 0.
public static float Repeat(float t, float length)
{
    return Clamp(t - Mathf.Floor(t / length) * length, 0.0f, length);
}


Fuzzy Noise: https://shadertoy.com/view/MltyR4


https://www.shadertoy.com/view/ltSfWV
float Smoothstep(float x)
{
    x = clamp(x, 0.0, 1.0);
    
    return x*x * (x * -2.0 + 3.0);
}

float Smootherstep(float x)
{
    x = clamp(x, 0.0, 1.0);
    
    return x*x*x * (x * (x * 6.0 - 15.0) + 10.0);
}

// continuity is independent of steepness parameter s
// at x = 1/2: 3rd derivative = 0 for s = 1;  2rd derivative = 0 for all values of s 
float Smootheststep(float x, float s)
{
    const float ss = 2.88539;// 2.0 / log(2.0)
    
    s *= ss;
    
    x = clamp(x, 0.0, 1.0);
    
    return 1.0 / (1.0 + exp2(tan(x * Pi - Pi05) * -s));
}

float InvSmootheststep(float x, float s)
{
    const float ss = 2.88539;// 2.0 / log(2.0)
    
    s *= ss;
    
    x = clamp(x, 0.0, 1.0);
    
    return atan(log2(1.0 / (1.0 - x) - 1.0) / s) * RcpPi + 0.5;
}

https://twitter.com/thespite/status/1503899796536446979?s=20&t=1-mu0UawcOGAfDzSaMwtZQ
point in hexagon
( v )
R = 1; // Radius
a = atan2( v.z, v.x );
b = (2 * PI) / 6
g = a - b * ( -1 + floor( a/b ) )
r = ( R * 0.5 * sqrt(3) ) / sin( g )
d = v.length()
return d < r;

https://twitter.com/thespite/status/1503901479597453317?s=20&t=1-mu0UawcOGAfDzSaMwtZQ
point in any polygon circle of radius R
( v )
R = 1; // Radius
a = atan2( v.z, v.x );
sides = 6
r = ( R * cos( PI / sides ) ) /
cos( ( 2* asin( sin( ( sides * a ) / 2 ))) / sides )
d = v.length()
return d < r;