// Pivot Rotation
// transform.position += (transform.rotation*Pivot);
// if (RotateX)
//     transform.rotation *= Quaternion.AngleAxis(45*Time.deltaTime, Vector3.right);
// if (RotateY)
//     transform.rotation *= Quaternion.AngleAxis(45*Time.deltaTime, Vector3.up);
// if (RotateZ)
//     transform.rotation *= Quaternion.AngleAxis(45*Time.deltaTime, Vector3.forward);
// transform.position -= (transform.rotation*Pivot);


a•b is the dot product
(a•b)/√(b•b) is scalar projection
b(a•b)/(b•b) is vector projection
(a•b)/(b•b) is uh, very useful, but what is it called?


// A long tail ease out function. Input range, 0-1. 
float QuarticEaseOut(const float& Input){ return (FMath::Pow(Input-1.0f, 4.0f) * -1.0f) + 1.0f; };
desmos y\ =\ \left(x-1\right)^{4}\ \cdot\ -1\ +\ 1
in range between 0-2 is makes a nice squarish curve

// A C2 continuous ease out function. Input range, 0-1
float CircularEaseOut(const float& Input){ return FMath::Sqrt(1.0f - FMath::Pow(Input - 1.0f, 2.0f)); };
demos y\ =\ \sqrt{1-\left(x-1\right)^{2}}  If going between 0 and 2, get a nice half circle

// An ease out function. Input range, 0-1.
float SquaredEaseOut(const float& Input){ return (FMath::Pow(Input-1.0f, 2.0f) * -1.0f) + 1.0f; };

y\ =\ \left(\left(x-1\right)^{2}\ \ \cdot\ \left(-1\right)\right)+\ 1
Not really square


var funhash = function(s) {
    for(var i = 0, h = 0xdeadbeef; i < s.length; i++)
        h = Math.imul(h ^ s.charCodeAt(i), 2654435761);
    return (h ^ h >>> 16) >>> 0;
};


https://github.com/Unity-Technologies/UnityCsReference/blob/master/Runtime/Export/Math/Mathf.cs
public static float LerpAngle(float a, float b, float t)
{
    float delta = Repeat((b - a), 360);
    if (delta > 180)
        delta -= 360;
    return a + delta * Clamp01(t);
}

// Calculates the shortest difference between two given angles.
public static float DeltaAngle(float current, float target)
{
    float delta = Mathf.Repeat((target - current), 360.0F);
    if (delta > 180.0F)
        delta -= 360.0F;
    return delta;
}

// Loops the value t, so that it is never larger than length and never smaller than 0.
public static float Repeat(float t, float length)
{
    return Clamp(t - Mathf.Floor(t / length) * length, 0.0f, length);
}

https://github.com/FreyaHolmer/Mathfs/blob/master/Runtime/Mathfs.cs#L83
	/// <summary>Returns the wedge product between two vectors</summary>
		public static Bivector3 Wedge( Vector3 a, Vector3 b ) =>
			new Bivector3(
				a.y * b.z - a.z * b.y,
				a.z * b.x - a.x * b.z,
				a.x * b.y - a.y * b.x
			);

	/// <summary>Returns the greatest common divisor of the two numbers</summary>
		public static int Gcd( int a, int b ) {
			// special case bc we can't negate int.MinValue
			if( a == int.MinValue || b == int.MinValue ) {
				if( a == int.MinValue && b == int.MinValue )
					return int.MinValue; // the only negative return value, bc we can't negate this number
				int v = Max( a, b ).Abs();
				return v & -v;
			}

			if( a == b )
				return a.Abs();
			( a, b ) = ( Abs( a ), Abs( b ) );
			while( a != 0 && b != 0 )
				_ = a > b ? a %= b : b %= a;
			return a | b;
		}

/// <summary>Gradually changes a value towards a desired goal over time.
		/// The value is smoothed by some spring-damper like function, which will never overshoot.
		/// The function can be used to smooth any kind of value, positions, colors, scalars</summary>
		/// <param name="current">The current position</param>
		/// <param name="target">The position we are trying to reach</param>
		/// <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it</param>
		/// <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster</param>
		/// <param name="maxSpeed">	Optionally allows you to clamp the maximum speed</param>
		/// <param name="deltaTime">The time since the last call to this function. By default Time.deltaTime</param>
		public static float SmoothDamp( float current, float target, ref float currentVelocity, float smoothTime, [Uei.DefaultValue( "Mathf.Infinity" )] float maxSpeed, [Uei.DefaultValue( "Time.deltaTime" )] float deltaTime ) {
			// Based on Game Programming Gems 4 Chapter 1.10
			smoothTime = MathF.Max( 0.0001F, smoothTime );
			float omega = 2F / smoothTime;

			float x = omega * deltaTime;
			float exp = 1F / ( 1F + x + 0.48F * x * x + 0.235F * x * x * x );
			float change = current - target;
			float originalTo = target;

			// Clamp maximum speed
			float maxChange = maxSpeed * smoothTime;
			change = Clamp( change, -maxChange, maxChange );
			target = current - change;

			float temp = ( currentVelocity + omega * change ) * deltaTime;
			currentVelocity = ( currentVelocity - omega * temp ) * exp;
			float output = target + ( change + temp ) * exp;

			// Prevent overshooting
			if( originalTo - current > 0.0F == output > originalTo ) {
				output = originalTo;
				currentVelocity = ( output - originalTo ) / deltaTime;
			}

			return output;
		}


		/// <summary>Applies cubic smoothing to the 0-1 interval, also known as the smoothstep function. Similar to an EaseInOut operation</summary>
		[MethodImpl( INLINE )] public static float Smooth01( float x ) => x * x * ( 3 - 2 * x );

		/// <summary>Applies quintic smoothing to the 0-1 interval, also known as the smootherstep function. Similar to an EaseInOut operation</summary>
		[MethodImpl( INLINE )] public static float Smoother01( float x ) => x * x * x * ( x * ( x * 6 - 15 ) + 10 );

		/// <summary>Applies trigonometric smoothing to the 0-1 interval. Similar to an EaseInOut operation</summary>
		[MethodImpl( INLINE )] public static float SmoothCos01( float x ) => Cos( x * PI ) * -0.5f + 0.5f;

Fuzzy Noise: https://shadertoy.com/view/MltyR4


https://www.shadertoy.com/view/ltSfWV
float Smoothstep(float x)
{
    x = clamp(x, 0.0, 1.0);
    
    return x*x * (x * -2.0 + 3.0);
}

float Smootherstep(float x)
{
    x = clamp(x, 0.0, 1.0);
    
    return x*x*x * (x * (x * 6.0 - 15.0) + 10.0);
}

// continuity is independent of steepness parameter s
// at x = 1/2: 3rd derivative = 0 for s = 1;  2rd derivative = 0 for all values of s 
float Smootheststep(float x, float s)
{
    const float ss = 2.88539;// 2.0 / log(2.0)
    
    s *= ss;
    
    x = clamp(x, 0.0, 1.0);
    
    return 1.0 / (1.0 + exp2(tan(x * Pi - Pi05) * -s));
}

float InvSmootheststep(float x, float s)
{
    const float ss = 2.88539;// 2.0 / log(2.0)
    
    s *= ss;
    
    x = clamp(x, 0.0, 1.0);
    
    return atan(log2(1.0 / (1.0 - x) - 1.0) / s) * RcpPi + 0.5;
}

https://twitter.com/thespite/status/1503899796536446979?s=20&t=1-mu0UawcOGAfDzSaMwtZQ
point in hexagon
( v )
R = 1; // Radius
a = atan2( v.z, v.x );
b = (2 * PI) / 6
g = a - b * ( -1 + floor( a/b ) )
r = ( R * 0.5 * sqrt(3) ) / sin( g )
d = v.length()
return d < r;

https://twitter.com/thespite/status/1503901479597453317?s=20&t=1-mu0UawcOGAfDzSaMwtZQ
point in any polygon circle of radius R
( v )
R = 1; // Radius
a = atan2( v.z, v.x );
sides = 6
r = ( R * cos( PI / sides ) ) /
cos( ( 2* asin( sin( ( sides * a ) / 2 ))) / sides )
d = v.length()
return d < r;


function dampSpringValue( value, target, velocity, dt, damp=0.4, tension=1 ){
    const accel = ( value - target ) * tension;
    const vel   = ( velocity * damp ) + accel * dt;
    const val   = value + vel * dt;
    return [ val, vel ];
}

//startAmplitude*sin(omega*t+startPhase)*exp(-t*dampningConstant)
// https://www.statisticshowto.com/calculus-definitions/damped-sine-wave/
// function dampedSineWave( t, decay=0.9, maxAmp=1 ){
//     return maxAmp * Math.exp( -decay * t ) * Math.cos( Math.PI * 2 );
// }


https://www.alexisbacot.com/blog/the-art-of-damping  ( EXTRA SPRING STUFF )
https://github.com/AlexisBacot/ArtOfDamping/blob/main/Assets/Scripts/ToolDamper.cs



https://github.com/Unity-Technologies/UnityCsReference/blob/61f92bd79ae862c4465d35270f9d1d57befd1761/Runtime/Export/Math/Mathf.cs#L303
function smoothDamp( cur, tar, vel, dt, smoothTime=0.0001, maxSpeed=Infinity ){
    // Based on Game Programming Gems 4 Chapter 1.10
    smoothTime      = Math.max( 0.0001, smoothTime );
    const omega     = 2 / smoothTime;
    const x         = omega * dt;
    const exp       = 1 / ( 1  + x + 0.48 * x * x + 0.235 * x * x * x);
    let   change    = cur - tar;

    // Clamp maximum speed
    const maxChange = maxSpeed * smoothTime;
    change          = Math.min( maxChange, Math.max( change, -maxChange ) );

    const temp      = ( vel + omega * change ) * dt;
    vel             = ( vel - omega * temp ) * exp;
    let output      = ( cur - change ) + ( change + temp ) * exp;

    // Prevent overshooting
    if( tar - cur > 0.0 && output > tar ){
        output  = tar;
        vel     = (output - tar) / dt;
    }

    return [ output, vel ];
}
